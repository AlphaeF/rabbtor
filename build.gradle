buildscript {
    ext {
        springBootVersion = "1.3.5.RELEASE"
        springLoadedVersion = "1.2.6.RELEASE"
    }

    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }
    dependencies {
        classpath "commons-io:commons-io:2.2"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:2.2.0"
        classpath "com.github.adrianbk:gradle-travisci-trigger-plugin:1.0.0"
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3'
        classpath 'net.gvmtool:gradle-sdkvendor-plugin:0.3.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.springframework:springloaded:$springLoadedVersion"
    }
}

apply plugin: 'idea'

ext {
    bintrayPublish = false
    // Sets release version
    rabbtorVersion = '1.0.0.BUILD-SNAPSHOT'
    grailsVersion = '3.2.0.BUILD-SNAPSHOT'
    isBuildSnapshot = rabbtorVersion.endsWith(".BUILD-SNAPSHOT")
    isTravisBuild = System.getenv().get("TRAVIS") == 'true'

    antTraxVersion = "1.7.1"
    antVersion = "1.9.3"
    aspectjVersion = "1.8.5"  // use same version as org.springframework:spring-aspects uses
    commonsCliVersion = "1.2"
    commonsCollectionsVersion = "3.2.1"
    commonsIOVersion = "2.2"
    commonsLangVersion = "2.6"
    datastoreVersion = "4.0.0.RELEASE"
    gantVersion = "1.9.6"
    gdocEngineVersion = "1.0.1"
    groovyVersion = System.getenv('CI_GROOVY_VERSION') ?: "2.4.6"
    ivyVersion = "2.3.0"
    jansiVersion = "1.11"
    jlineVersion = "2.12"
    jnaVersion = "4.0.0"
    slf4jVersion = "1.7.10"
    reactorVersion = '2.0.0.RELEASE'
    jspVersion = '2.2.1'

    spockVersion = '1.0-groovy-2.4'
    springLoadedVersion = "1.2.6.RELEASE"
    springBootVersion = "1.3.5.RELEASE"
    springLoadedCommonOptions = "-Xverify:none -Dspringloaded.synchronize=true -Djdk.reflect.allowGetCallerClass=true"
    springVersion = "4.2.6.RELEASE"
    ehcacheVersion = "2.4.6"
    junitVersion = "4.12"
    concurrentlinkedhashmapVersion = "1.4"
    cglibVersion = "2.2.2"
    objenesisVersion = "1.4"
    tomcatVersion = "8.0.32"
    servletApiVersion = "3.1.0"
    hibernateValidatorVersion = '5.2.4.Final'
    ovalVersion = '1.85'
    thymeleafVersion = "3.0.0.BETA03"
    freemarkerVersion = '2.3.24-incubating'
    validationApiVersion = '1.1.0.Final'

    isJava8Compatible = org.gradle.api.JavaVersion.current().isJava8Compatible()

    nexusUsername = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
    nexusPassword = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''


}

// Spring boot configuration
ext['spring.version'] = ext.springVersion
ext['groovy.version'] = ext.groovyVersion


version = rabbtorVersion

// directories created during the build which are related
// to turning the workspace root into a rabbtor_HOME
ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeDistDir = file("dist")
    homeBinDir = file("bin")
    homeConfDir = file("conf")
    homeLibDir = file("lib")
    homeSrcDir = file("src")


}

// Groovy is added as a dependency to both the 'groovy' and 'compile'
// configurations, so place the dependency in a shared variable. The
// 'compile' is required so that Groovy appears as a dependency in the
// artifacts' POMs.
ext.jointBuildGroovyJarProperty = System.getProperty('groovy.jar')
ext.groovyDependency = dependencies.create("org.codehaus.groovy:groovy:${groovyVersion}") {
    exclude module: "commons-cli"
    exclude module: "ant"
}


subprojects { project ->
    version = rabbtorVersion
    group = "com.rabbtor"
    ext.isTestSuite = project.name.startsWith("rabbtor-test-suite")

    if (project.name  == 'rabbtor-web-example' ||
        project.name == 'rabbtory-dummy')
        return


    apply plugin: 'groovy'

    if (!isTestSuite)
    {
        apply plugin: 'com.bmuschko.nexus'
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'
    }
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: 'provided-base'
    apply plugin: 'optional-base'

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    repositories {
        maven { url  "http://rabbytes.bintray.com/grails-core" }
        maven { url  "http://repo.grails.org/grails/grails-core" }
        mavenLocal()
        jcenter()
    }

    configure([compileGroovy, compileTestGroovy]) {
        groovyOptions.fork(jvmArgs: ['-XX:MaxPermSize=512m'], memoryInitialSize: '128M', memoryMaximumSize: '1G')
        groovyOptions.encoding = "UTF-8"
        options.encoding = "UTF-8"
    }

    configure([compileJava, compileTestJava]) {
        options.deprecation = true
        options.debug = true
    }

    dependencies {
        compile groovyDependency

        compileOnly "javax.validation:validation-api:${validationApiVersion}"
        compileOnly "org.springframework:spring-webmvc:${springVersion}", {
            exclude group: 'org.codehaus.groovy', module: 'groovy'
        }
        compileOnly "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}", {
            exclude group: 'org.codehaus.groovy', module: 'groovy'
        }



        testCompile "org.codehaus.groovy:groovy-test:${groovyVersion}", {
            exclude group: 'junit', module: 'junit'
            exclude group: 'org.codehaus.groovy', module: 'groovy'
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }

        if(project.name =~ /^(rabbtor-web|rabbtor-test-suite|rabbtor-test)/) {
            dependencies {
                compileOnly "javax.servlet:javax.servlet-api:$servletApiVersion"
                // MockHttpServletRequest/Response/Context used in many classes
                compileOnly ("org.springframework:spring-test:${springVersion}") {
                    exclude group: 'org.codehaus.groovy', module: 'groovy'
                }
            }
        }

        if (project.name != "rabbtor-docs")
        {

            // Logging
//            compile "org.slf4j:slf4j-api:$slf4jVersion"
//            compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"

            // Testing
            testCompile "junit:junit:${junitVersion}"

            // Required by Spock's Mocking
            testCompile "cglib:cglib-nodep:${cglibVersion}"
            testCompile "org.objenesis:objenesis:${objenesisVersion}"

            testCompile "javax.validation:validation-api:${validationApiVersion}"
            testCompile ("org.springframework.boot:spring-boot:${springBootVersion}")
            testCompile ("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}") {
                exclude group: 'org.codehaus.groovy', module: 'groovy'
            }
            testCompile ("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")
            testCompile ("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
            testCompile ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
                exclude group:'junit'
            }

            testCompile ("org.spockframework:spock-spring:${spockVersion}") {
                exclude group: 'junit', module: 'junit-dep'
                exclude group: 'org.codehaus.groovy', module: 'groovy-all'
            }

        }
    }

    test {
        excludes = ["**/*TestCase.class", "**/*\$*.class"]
        if (isTravisBuild)
        {
            maxParallelForks = 2
            maxHeapSize = '768m'
            if (!isJava8Compatible)
            {
                jvmArgs '-XX:MaxPermSize=256m'
            }
            afterSuite {
                System.out.print('.')
                System.out.flush()
            }
        } else
        {
            maxHeapSize = '1024m'
            if (!isJava8Compatible)
            {
                jvmArgs '-XX:MaxPermSize=512m'
            }
        }
        if (System.getProperty("debug.tests"))
        {
            jvmArgs debugArguments
        }
    }

    task singleTest(type: Test) {
        // task for running a single test with -DsingleTest.single=TestName singleTest
        if (System.getProperty("debug.tests"))
        {
            jvmArgs debugArguments
        }
    }


}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}